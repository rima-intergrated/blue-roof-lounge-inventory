const express = require('express');
const router = express.Router();
router.post('/positions', async (req, res) => {
  try {
    const { positionTitle, positionCode, department = 'Other', level = 'Entry Level' } = req.body;
    
    if (!positionTitle || !positionCode) {
      return res.status(400).json({
        success: false,
        message: 'Position title and code are required'
      });
    }

    // Create a simplified position record
    const positionData = {
      positionTitle: positionTitle.trim(),
      positionCode: positionCode.trim().toUpperCase(),
      department,
      level,
      description: `${positionTitle} position`,
      responsibilities: ['General duties as assigned'],
      requirements: {
        education: [],
        experience: { minimum: 0, preferred: 0 },
        skills: [],
        certifications: []
      },
      salary: {
        minimum: 20000,
        maximum: 50000,
        currency: 'KES',
        payFrequency: 'Monthly'
      },
      workSchedule: {
        type: 'Full-time',
        hoursPerWeek: 40
      }
    };

    // Find any existing user to use as createdBy
    const User = require('../models/User');
    const existingUser = await User.findOne({});
    if (existingUser) {
      positionData.createdBy = existingUser._id;
    }

    const Position = require('../models/Position');
    const position = new Position(positionData);
    const savedPosition = await position.save();
    
    res.status(201).json({
      success: true,
      message: 'Position created successfully',
      data: { position: savedPosition }
    });
  } catch (error) {
    console.error('Error creating position:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to create position',
      error: error.message
    });
  }
});aff,
  getStaffById,
  createStaff,
  updateStaff,
  deleteStaff,
  getStaffStats
} = require('../controllers/staffController');
const { authenticateToken, authorize, checkPermission } = require('../middleware/auth');
const {
  validateStaff,
  validateMongoId,
  validatePagination
} = require('../middleware/validation');

// Apply authentication to all routes (temporarily disabled for testing)
// router.use(authenticateToken);

// Public staff routes (temporarily no authentication for testing)
router.get('/stats', getStaffStats);
router.get('/', validatePagination, getAllStaff);
router.get('/:id', validateMongoId, getStaffById);

// HR/Admin only routes (temporarily no authentication for testing)
router.post('/', validateStaff, createStaff);
router.put('/:id', [validateMongoId, validateStaff], updateStaff);
router.delete('/:id', validateMongoId, deleteStaff);

// Position routes (public access for frontend)
router.get('/positions', async (req, res) => {
  try {
    const Position = require('../models/Position');
    const positions = await Position.find().sort({ positionTitle: 1 }).select('positionTitle positionCode department level description');
    
    // If no positions found, return a simple list for the frontend
    if (positions.length === 0) {
      return res.json({
        success: true,
        message: 'No positions found. Using default positions.',
        data: {
          positions: [
            { _id: 'temp1', positionTitle: 'Manager', positionCode: 'MGR', department: 'Management', level: 'Management' },
            { _id: 'temp2', positionTitle: 'Cashier', positionCode: 'CSH', department: 'Sales', level: 'Junior Staff' },
            { _id: 'temp3', positionTitle: 'Waiter', positionCode: 'WAIT', department: 'Bar/Service', level: 'Entry Level' },
            { _id: 'temp4', positionTitle: 'Chef', positionCode: 'CHEF', department: 'Kitchen', level: 'Senior Staff' }
          ],
          total: 4
        }
      });
    }
    
    res.json({
      success: true,
      message: 'Positions retrieved successfully',
      data: {
        positions: positions,
        total: positions.length
      }
    });
  } catch (error) {
    console.error('Error fetching positions:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to fetch positions',
      error: error.message
    });
  }
});

router.post('/positions', async (req, res) => {
  try {
    const { positionTitle, positionCode, department = 'Other', level = 'Entry Level' } = req.body;
    
    if (!positionTitle || !positionCode) {
      return res.status(400).json({
        success: false,
        message: 'Position title and code are required'
      });
    }

    // Create a simplified position record
    const positionData = {
      positionTitle: positionTitle.trim(),
      positionCode: positionCode.trim().toUpperCase(),
      department,
      level,
      description: `${positionTitle} position`,
      responsibilities: ['General duties as assigned'],
      requirements: {
        education: [],
        experience: { minimum: 0, preferred: 0 },
        skills: [],
        certifications: []
      },
      salary: {
        minimum: 20000,
        maximum: 50000,
        currency: 'KES',
        payFrequency: 'Monthly'
      },
      workSchedule: {
        type: 'Full-time',
        hoursPerWeek: 40
      }
    };

    // Find any existing user to use as createdBy
    const User = require('../models/User');
    const existingUser = await User.findOne({});
    if (existingUser) {
      positionData.createdBy = existingUser._id;
    }

    const Position = require('../models/Position');
    const position = new Position(positionData);
    const savedPosition = await position.save();
    
    res.status(201).json({
      success: true,
      message: 'Position created successfully',
      data: { position: savedPosition }
    });
  } catch (error) {
    console.error('Error creating position:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to create position',
      error: error.message
    });
  }
});

module.exports = router;
